# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet stl "Stateless Widget" b
class ${1:MyWidget} extends StatelessWidget {
	const $1({Key? key}) : super(key: key);

	@override
	Widget build(BuildContext context) {
		return ${2:Container}();
	}
}
endsnippet

snippet stfl "Stateful Widget" b
class ${1:MyWidget} extends StatefulWidget {
	const $1({Key? key}) : super(key: key);

	@override
	State<$1> createState() => _$1State();
}

class _$1State extends State<$1> {
	@override
	Widget build(BuildContext context) {
		return Container();
	}
}
endsnippet

snippet valuenotifier "Value notifier pair" b
final _$1 = ValueNotifier<$2>(${0});
ValueListenable<${2}> get ${1:name} => _$1;
endsnippet

snippet setter "Private field with setter and getter" b
${1:Type} get ${2:name} => _$2;
$1 _$2;
set $2($1 value) {
	if (value != _$2) {
		_$2 = value;
		$0
	}
}
endsnippet
