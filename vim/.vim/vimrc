syntax on
set nocompatible
set tabstop=3
set  number
set relativenumber
set autoindent
set wildmenu
" set path+=** 
set hidden
set splitbelow splitright
"exucute root dir vimrc
set exrc
set ignorecase
set smartcase

" no more swp files!
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile


call plug#begin()

Plug 'dart-lang/dart-vim-plugin'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/jsonc.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/nerdtree'
Plug 'vim-scripts/Rainbow-Parenthesis'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'zchee/vim-flatbuffers'
Plug 'fatih/vim-go'
Plug 'crusoexia/vim-monokai'
Plug 'lervag/vimtex'
Plug 'editorconfig/editorconfig-vim'
Plug 'posva/vim-vue'
Plug 'plasticboy/vim-markdown'

call plug#end()

let NERDTreeShowHidden=1

let g:airline_theme='term'

" Latex config
let g:tex_flavor='latex'
let g:vimtex_compiler_progname = 'nvr'
" let g:vimtex_view_general_viewer = 'open -a /Applications/Skim.app'
" let g:vimtex_view_skim_activate = 1
let g:vimtex_view_method = 'skim'

" Go config
let g:go_highlight_structs = 1 
let g:go_highlight_methods = 1
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_extra_types = 0
let g:go_highlight_fields = 1
let g:go_highlight_variable_declarations = 0
let g:go_highlight_variable_assignments = 0
let g:go_highlight_function_parameters = 1

"Dart config
let g:dart_format_on_save = 1
let g:dart_style_guide = 2
let g:lsc_server_commands = {'dart': 'dart_language_server'}
let g:lsc_auto_map = v:true
let g:dartfmt_options = ['--fix', '-l 100']

" Refresh buffer
set autoread


colorscheme monokai

noremap <C-H> <C-W>h
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-L> <C-W>l
let mapleader = ','

let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let $FZF_DEFAULT_OPTS='--reverse'
let g:fzf_default_command='fd --type f -H --exclude .git --exclude "*.png" --exclude "*.ttf"'
let $FZF_DEFAULT_COMMAND=g:fzf_default_command

nnoremap <leader>n :NERDTreeToggle<cr>
nnoremap <leader>m :NERDTreeFind<cr>
nnoremap <leader>o :Files<cr>
nnoremap <leader>O :Commands<cr>
nnoremap <leader>l :Lines<cr>

nnoremap <leader>/ :Commentary<cr>

nnoremap <silent> <leader>s :update<cr>
nnoremap <silent> <leader>w :bd<cr>
nnoremap <silent> <leader>q :q<cr>
nnoremap <silent> <leader>rr :e<cr>
nnoremap <silent> <leader>rs :source %<cr>

" Enable mouse support
set mouse=a

" Always keep 10 lines below/above cursor
set scrolloff=10

" Scroll up 10 lines when going to bottom of file
nnoremap G Gzb10<C-E>


" Coc mappings --------------------------------------------------------

" Enable airline integration
let g:airline#extensions#coc#enabled = 0

" Map diagnostics
nmap <silent> <leader>d :CocList diagnostics<cr>

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
" nmap <leader>. <Plug>(coc-codeaction)
nmap <leader>. :CocAction<cr>
nmap <leader>, :CocCommand<cr>
" Apply AutoFix to problem on the current line.
nmap <leader>gf  <Plug>(coc-fix-current)

" enter for pair brackets
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
				\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nnoremap <silent> <leader>p :call CocActionAsync('showSignatureHelp')<cr>

" set error/warning highlight colors
highlight CocErrorHighlight ctermbg=124  guibg=#af0000
highlight CocWarningHighlight ctermbg=100  guibg=#878700
set termguicolors

" ---------------------------------------------------------------------


let g:current_function = ''
autocmd CursorHold * silent let g:current_function = CocAction('getCurrentFunctionSymbol')
let g:airline_section_y = '%{g:current_function}'


" let g:coc_node_args = ['--nolazy', '--inspect-brk=6045']
